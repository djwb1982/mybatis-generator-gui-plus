<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN" "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>  
	<!-- 数据库驱动-->  
    <classPathEntry  location="D:\MavenRepository\mysql\mysql-connector-java\5.1.38\mysql-connector-java-5.1.38.jar"/>  
    
    <!-- 一个数据库一个context -->	
    <context id="MysqlTables"  targetRuntime="MyBatis3">  

        <!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；一般保留默认值，遇到数据库关键字（Java关键字），
                                 使用columnOverride覆盖
         -->
        <property name="autoDelimitKeywords" value="false"/>
        <!-- 生成的Java文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8"/>
        <!-- 格式化java代码 -->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
        <!-- 格式化XML代码 -->
        <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>

        <!--开启抑制类型的警告信息-->
        <property name="suppressTypeWarnings" value="true"/>
    
		<!-- 指定生成的java文件的编码,没有直接生成到项目时中文可能会乱码 -->
        <property name="javaFileEncoding" value="UTF-8"/>
	    <!-- 自动生成tostring方法 -->
	    <plugin type="org.mybatis.generator.plugins.ToStringPlugin"/>
        <!-- 自动生成equals方法和hashcode方法 -->
        <plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin"/>
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>
        <!-- Example生成,需要在table设置属性ByExample=true -->
        <plugin type="org.mybatis.generator.plugins.RenameExampleClassPlugin">
            <property name="searchString" value="Example$"/>
            <property name="replaceString" value="Criteria"/>
        </plugin>
        <!-- service层插件 -->
        <plugin type="org.mybatis.generator.plugins.MybatisServicePlugin">
            <property name="targetPackage" value="com.fendo.generatorplus.service"/>
            <property name="implementationPackage" value="com.fendo.generatorplus.service.impl"/>
            <property name="targetProject" value="src/main/java"/>
            <property name="enableInsert" value="true"/>
            <property name="enableUpdateByExampleSelective" value="true"/>
            <property name="enableInsertSelective" value="true"/>
            <property name="enableUpdateByPrimaryKey" value="true"/>
            <property name="enableDeleteByPrimaryKey" value="true"/>
            <property name="enableDeleteByExample" value="true"/>
            <property name="enableUpdateByPrimaryKeySelective" value="true"/>
            <property name="enableUpdateByExample" value="true"/>
        </plugin>            
        <!-- 注释生成器配置 -->
        <commentGenerator>
			<!-- 是否去掉注释代时间戳 true：是 ： false:否,默认yyyy-MM-dd HH:mm:ss -->
			<property name="suppressDate" value="false" />
            <property name="dateFormat" value="yyyy/MM/dd HH:mm"/>
			<!-- 是否去除自动生成的所有注释 true：是 ： false:否 -->
			<property name="suppressAllComments" value="false" />
			<!-- 是否添加字段注释 true:是 false：否 -->
			<property name="addRemarkComments" value="true" />
			<!-- 自己添加的参数属性:数据表字段的get、set方法是否添加final关键字,默认为true -->
            <property name="addMethodFinal" value="true"/>
			<!-- 自定义属性 作者名称 -->
			<property name="author" value="Fendo" />
			<!-- 自定义属性 当前版本 -->
			<property name="version" value="1.0" />	
			<!-- 自定义属性 版权 -->
			<property name="copyright" value="2017-2020 贯众健康公司" />						
		</commentGenerator>
        
        <!--数据库连接的信息：驱动类、连接地址、用户名、密码 -->  
        <jdbcConnection driverClass="com.mysql.jdbc.Driver" connectionURL="jdbc:mysql://localhost:3306/test" userId="root" password="root">  
        </jdbcConnection>  
        
        <!-- 类型转换 -->
        <javaTypeResolver>  
            <!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和
                NUMERIC 类型解析为java.math.BigDecimal -->
            <property name="forceBigDecimals" value="false"/>  
        </javaTypeResolver> 
         
        <!-- 生成实体类的位置 -->
        <javaModelGenerator targetPackage="com.fendo.generatorplus.entity" targetProject="src/main/java">
            <!--  for MyBatis3/MyBatis3Simple
                                         自动为每一个生成的类创建一个构造方法，构造方法包含了所有的field;而不是使用setter;
            -->
            <property name="constructorBased" value="false"/> 
              <!-- 是否在当前路径下新加一层schema,
                eg：false路径com.fendo.entity,
                    true:com.fendo.entity.[schemaName]
             --> 
            <property name="enableSubPackages" value="true"/> 
            <!-- 是否针对string类型的字段在set/get的时候进行trim调用:清理前后的空格 --> 
            <property name="trimStrings" value="true"/>  
        </javaModelGenerator>
          
         <!-- 生成mapper xml文件 -->  
        <sqlMapGenerator targetPackage="com.fendo.generatorplus.dao" targetProject="src/main/java"> 
            <!-- 解释同上:生成实体类的位置 --> 
            <property name="enableSubPackages" value="true"/>  
        </sqlMapGenerator>  
        
        <!-- 对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口
           targetPackage/targetProject:同javaModelGenerator
           type: 选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：
                 1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；
                 2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；
                 3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；
           	注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER
        -->
        <!-- 生成mapper接口生成的位置 -->
        <javaClientGenerator type="XMLMAPPER" targetPackage="com.fendo.generatorplus.dao" targetProject="src/main/java">
            <!-- 解释同上:生成实体类的位置 -->  
            <property name="enableSubPackages" value="true"/>  
        </javaClientGenerator> 
         
        <!-- 要生成的表   
                tableName是数据库中的表名或视图名 
                domainObjectName是实体类名 
                enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false"
        -->  
        <table tableName="test" domainObjectName="Test"></table>
    </context>  
</generatorConfiguration>  